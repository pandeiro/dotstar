#!/bin/bash

start() {
    sudo /etc/rc.d/$1 start;
}

stop() {
    sudo /etc/rc.d/$1 stop;
}

restart() {
    sudo /etc/rc.d/$1 restart;
}

extract () {
    if [ -f $1 ]; then
	case $1 in
            *.tar.bz2)   tar xvjf $1    ;;
            *.tar.gz)    tar xvzf $1    ;;
            *.bz2)       bunzip2 $1     ;;
            *.rar)       rar x $1       ;;
            *.gz)        gunzip $1      ;;
            *.tar)       tar xvf $1     ;;
            *.tbz2)      tar xvjf $1    ;;
            *.tgz)       tar xvzf $1    ;;
            *.zip)       unzip $1       ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1        ;;
            *)           echo "don't know how to extract '$1'..." ;;
	esac
    else
	echo "'$1' is not a valid file!"
    fi
}

google() {
    url=$(echo http://google.com/search?q=$(echo "$@" | sed s/\ /+/g))
    lynx -accept_all_cookies $url
}

macbuntu() {
    sudo mkfs.vfat -F 32 -n MACBUNTU /dev/sdb1
    devmon &
    sudo unetbootin &
}

webs() {
    lein new webs "$1"
    cd "$1"
    emacs -nw -f clojure-web-jack-in
}

cc() {
    # sed was the wrong tool for removing all whitespace, b/c of \n
    #sed 's/\s//g' "$1" | wc -m

    # tr is a better (simpler) tool for this
    cat "$1" | tr -d [:space:] | wc -m
}

# These functions require underscore-cli (npm install -g underscore-cli)
# and a ~/.couchrc file with the fully-qualified url to
# a CouchDB instance

couch-get() {
    url=$(<~/.couchrc)"/$1"

    curl -s "$url"
}

couch-post() {
    url=$(<~/.couchrc)"/$1"

    curl -sX POST "$url" -H "Content-Type: application/json" \
	-d "$2"
}

couch-put() {
    url=$(<~/.couchrc)"/$1"

    curl -sX PUT "$url" -H "Content-Type: application/json" \
	-d "$2"
}

couch-upload() {
    doc=$(couch-get "$1")
    rev=$(underscore --data "$doc" extract _rev)
    file="$2"
    safe_file=${file// /-}
    url=$(<~/.couchrc)"/$1/$safe_file?rev=${rev//\"}"

    curl -sX PUT "$url" -H "Content-Type: $3" --data-binary @"$file"
}

# Colored man pages ftw!
colorful() {
    cmd=$1; shift
    env \
	LESS_TERMCAP_mb=$(printf "\e[1;31m") \
	LESS_TERMCAP_md=$(printf "\e[1;31m") \
	LESS_TERMCAP_me=$(printf "\e[0m") \
	LESS_TERMCAP_se=$(printf "\e[0m") \
	LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
	LESS_TERMCAP_ue=$(printf "\e[0m") \
	LESS_TERMCAP_us=$(printf "\e[1;32m") \
	$cmd "$@"
}

man() {
    colorful man "$@"
}

top() {
    colorful top "$@"
}

# Just do it.
get-js-libs() {
    g='wget -q -O-'
    $g http://code.jquery.com/jquery-latest.min.js > jquery.min.js
    $g http://d3js.org/d3.v3.min.js > d3.min.js
    $g http://underscorejs.org/underscore-min.js > underscore-min.js
}

# Record screen
grab-screen() {
    if [ $# -ne 2 ]; then
	echo "USAGE: grab-screen <resolution> <output-filename>"
    else
	ffmpeg -f x11grab -s "$1" -r 25 -i :0.0+0,0 -qscale 0 "$2"
    fi
}

# https://github.com/mathiasbynens/dotfiles/blob/master/.functions

# Represent file as data URL: 
dataurl() {
    local mimeType=$(file -b --mime-type "$1")
    if [[ $mimeType == text/* ]]; then
	mimeType="${mimeType};charset=utf-8"
    fi
    echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Wrap SimpleHTTPServer to force UTF-8 on text files
server() {
    local port="${1:-8080}"
    # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
    # And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
    python2 -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Set up a quick D3-based visualization template
new-d3() {
    local project="$1"
    local d3=~/gh/d3/d3.js

    # Create project directory and subdirectories
    mkdir "$project"
    cd "$project"
    mkdir js css

    # Copy D3
    cp "$d3" js/

    # Create index.html
    echo "<!doctype html>
<html>
  <head>
    <meta charset=\"utf-8\">
    <title></title>
    <link rel=\"stylesheet\" href=\"css/styles.css\" type=\"text/css\">
  </head>
  <body>
    <div id=\"wrapper\"></div>
    <script src=\"js/d3.js\"></script>
    <script src=\"skewer\"></script> <!-- live browser eval from Emacs -->
    <script src=\"js/main.js\"></script>
  </body>
</html>" > index.html

    # Create js/main.js
    touch js/main.js

    # Create css/styles.css
    touch css/styles.css

    # Open an Emacs window to the project and start skewer for live eval
    emacsclient --eval \
	'(find-file "index.html")' \
	'(find-file "js/main.js")' \
	'(httpd-start)' '(switch-to-buffer "index.html")' \
	'(setq httpd-root default-directory)' \
	'(switch-to-buffer "main.js")' '(js2-mode)' '(skewer-mode)' && \
    chromium --app=http://localhost:8080/index.html &
}
